1.
  d. Instance: self-balancing treesort
2. The operation still requires O(log n) swaps and is nondeterministic.
3.  4      4      2      2      1       [1,2,3,4]
   / \    / \    / \    / \    / \
  2   3  1   3  4   3  1   3  2   3
 /      /      /      /      /
1      2      1      4      4

    2      5      3      3        [3,4,6,5]
   / \    / \    / \    / \
  3   6  3   6  5   6  4   6
 / \    /      /      /
4   5  4      4      5
4.
  b. O(k log k + n log (n+k))
  c. Use heapify to construct the initial heap. O(k + n log (n+k))
  d. Use quickselect to prune to k best candidates. O(k + n log n)
5.
  b.
def fib(n, cache={0: 1, 1: 1}):
    if n in cache:
        return cache[n]
    cache[n] = fib(n-1, cache) + fib(n-2, cache)
    return cache[n]
  d. Both are instances of DP.
6.
  b. dp(Xi) = smallest number of coins needed to make up Xi cents
  c. Space: O(X) Time: O(nX)
  e. dp(x, t) = smallest n of types of coins needed considering type t only
  f. dp(0, t) = 0; dp(x>0, t>=len(v)) = None; dp(x, t) = min([dp(x-vt*k, t+1) + k for k in xrange(x//vt)])
  g. O(nX) for both time and space
